{"version":3,"file":"editing.min.js","sources":["../src/editing.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript function for the editing interface of formulas question type\n *\n * @copyright &copy; 2010-2011 Hon Wai, Lau\n * @author Hon Wai, Lau <lau65536@gmail.com>\n * @license http://www.gnu.org/copyleft/gpl.html GNU Public License version 3\n */\n\nimport {exception as displayException} from 'core/notification';\n\n/**\n * Update the correctness simple elements from the expert one.\n *\n * @param {String} id\n * @param {boolean} checked\n */\nfunction formulasFormCorrectness(id, checked) {\n    // TODO Rewrite this entire thing.\n    var errNames = new Array(M.util.get_string('relerror', 'qtype_formulas'), M.util.get_string('abserror', 'qtype_formulas'));\n    var nid = 'correctness[' + id + ']';\n    var n = document.getElementsByName(nid)[0];\n    if (n === null) {\n        return;\n    }\n    var bid = 'id_correctness_' + id + '_buttons';\n    var b = document.getElementById(bid);\n    if (b === null) {\n        var tmp = document.createElement('div');\n        tmp.id = bid;\n        b = n.parentNode.appendChild(tmp);\n    }\n    var useRawInput = checked;\n    if (!useRawInput) {\n        var res = /^\\s*(_relerr|_err)\\s*(<|==)\\s*([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)\\s*$/.exec(n.value);\n        if (res === null) {\n            if (n.value.replace(/^\\s+|\\s+$/g, \"\").length == 0) {\n                res = ['', '_relerr', '<', '0.01'];\n                n.value = '_relerr < 0.01';\n            }\n        }\n        if (res === null) {\n            useRawInput = true;\n        } else {\n            var s = `<select id=\"${bid}_type\" class=\"mform form-inline form-control\">`;\n            if (res[1] === '_relerr') {\n                s += `<option value=\"_relerr\" selected=\"selected\">${errNames[0]}</option>`;\n                s += `<option value=\"_err\">${errNames[1]}</option>`;\n            } else if (res[1] === '_err') {\n                s += `<option value=\"_relerr\">${errNames[0]}</option>`;\n                s += `<option value=\"_err\" selected=\"selected\">${errNames[1]}</option>`;\n            } else {\n                // Should not happen!\n                s += `<option value=\"_relerr\">${errNames[0]}</option>`;\n                s += `<option value=\"_err\" selected=\"selected\">${errNames[1]}</option>`;\n            }\n            s += `</select>`;\n            s += `<select id=\"${bid}_op\" class=\"mform form-inline form-control\">`;\n            if (res[2] === '<') {\n                s += '<option value=\"<\" selected=\"selected\">&lt</option>';\n                s += '<option value=\"==\">==</option>';\n            } else if (res[2] === '==') {\n                s += '<option value=\"<\">&lt</option>';\n                s += '<option value=\"==\" selected=\"selected\">==</option>';\n            } else {\n                // Should not happen!\n                s += '<option value=\"<\">&lt</option>';\n                s += '<option value=\"==\">==</option>';\n            }\n            s += `</select>`;\n            s += `<input id=\"${bid}_tol\" type=\"text\" class=\"mform form-inline form-control\" value=\"${res[3]}\">`;\n            b.innerHTML = s;\n            b.addEventListener('change', (e) => {\n                const select = e.target.closest('select');\n                if (select.id === `${bid}_type`) {\n                    this.formMerge(id);\n                    return;\n                }\n                if (select.id === `${bid}_op`) {\n                    this.formMerge(id);\n                    return;\n                }\n\n                const input = e.target.closest('input');\n                if (input.id === `${bid}_tol`) {\n                    this.formMerge(id);\n                    return;\n                }\n            });\n        }\n    }\n    n.style.display = useRawInput ? 'block' : 'none';\n    b.style.display = useRawInput ? 'none' : 'block';\n}\n\n\nclass FormulasForm {\n    constructor() {\n        // Get all the values that will be usable for the methods in this object.\n        this.numsubq = this.countParts();\n\n        // Global options allow the change of the same options in all parts at once.\n        try {\n            this.initialiseGlobalOptionsForNamedItem('unitpenalty');\n            this.initialiseGlobalOptionsForNamedItem('ruleid');\n        } catch (e) {\n            window.console.warning(e);\n        }\n\n        // Allow the easier selection of correctness, rather than manual input of formula.\n        for (let i = 0; i < this.numsubq; i++) {\n            try {\n                this.initialiseSelectiveCriteria(i);\n            } catch (e) {\n                displayException(e);\n            }\n        }\n\n        // Add the button to select the number of dataset.\n        try {\n            this.initialiseNumdatasetOption();\n            this.showDatasetAndPreview('none');\n        } catch (e) {\n            window.console.warning(e);\n        }\n    }\n\n    /**\n     * Update the correctness expert element from the simple ones.\n     *\n     * @param {String} id\n     */\n    formMerge(id) {\n        const correctnessElement = document.querySelector(`[name=\"correctness[${id}]\"]`);\n        const bid = `id_correctness_${id}_buttons`;\n        const errorType = document.getElementById(`${bid}_type`).value;\n        const errorOp = document.getElementById(`${bid}_op`).value;\n        const errorVal = document.getElementById(`${bid}_tol`).value;\n        correctnessElement.value = `${errorType} ${errorOp} ${errorVal}`;\n    }\n\n\n    /**\n     * Please check this.\n     *\n     * @param {String} name\n     */\n    updateOptionsFromGlobal(name) {\n        const globalNamedOption = document.getElementsByName(`global${name}`)[0];\n        [...document.querySelectorAll(`[name^=\"${name}[`)].forEach((element) => {\n            element.value = globalNamedOption.value;\n            element.closest('.form-group').classList.add('hide');\n        });\n    }\n\n    /**\n     * Count the number of parts.\n     *\n     * @returns {Number}\n     */\n    countParts() {\n        return document.querySelectorAll('[name^=\"answermark[\"]').length - 1;\n    }\n\n    // By default, the value of global input field will apply to all its parts.\n    initialiseGlobalOptionsForNamedItem(name) {\n        // Set the global option for the named item to the value of the first instance of it.\n        const globalNamedOption = document.querySelector(`[name=\"global${name}\"]`);\n        const firstNamedOption = document.querySelector(`[name=\"${name}[0]\"]`);\n        globalNamedOption.value = firstNamedOption.value;\n        globalNamedOption.addEventListener('change', () => {\n            this.updateOptionsFromGlobal(name);\n        });\n        this.updateOptionsFromGlobal(name);\n    }\n\n    // Allow a more user friend way to select the commonly used criteria.\n    initialiseSelectiveCriteria(i) {\n        const loc = document.getElementById(`id_correctness_${i}`).parentNode.closest(\":not(.fitem)\");\n\n        const showId = `id_correctness_${i}_show`;\n        let showCorrectnessField = document.getElementById(showId);\n        if (showCorrectnessField === null) {\n            var tmp = document.createElement('div');\n            // TODO - this ID creates a duplicate ID on the page. NONO!!\n            tmp.id = showId;\n            tmp.classList.add('formulas_correctness_show');\n            showCorrectnessField = loc.insertBefore(tmp, loc.firstChild);\n        }\n\n        // Always unchecked by default.\n        const initialChecked = false;\n\n        formulasFormCorrectness(i, initialChecked);\n\n        const wrapper = document.createElement('span');\n        wrapper.append(...showCorrectnessField.children);\n        showCorrectnessField.append(wrapper);\n\n        const checkbox = document.createElement('input');\n        checkbox.id = showId;\n        checkbox.checked = true;\n        // TODO Replace with langstring.\n        checkbox.value = \"Expert\";\n\n        showCorrectnessField.prepend(checkbox);\n        showCorrectnessField.addEventListener('click', () => {\n                formulasFormCorrectness(i, checkbox.checked);\n        });\n    }\n\n    // Add the options to select the number of datasets.\n    initialiseNumdatasetOption() {\n        // TODO: Convert to a Template.\n        const options = Object.entries(([key, value]) => {\n            const selected = key == 5 ? 'selected=\"selected\"' : '';\n            const option = document.createElement('option');\n            option.value = key;\n            option.innerHTML = value;\n            if (selected == 5) {\n                option.selected = true;\n            }\n            return option;\n        });\n\n        const select = document.createElement('select');\n        select.append(...options);\n        select.name = \"numdataset\";\n        select.id = \"numdataset\";\n        const button = document.createElement('input');\n        button.type = 'button';\n        button.value = M.util.get_string('instantiate', 'qtype_formulas');\n        button.addEventListener('click', () => {\n            this.instantiateDataset();\n        });\n\n        const div = document.createElement('div');\n        div.id = \"xxx\";\n\n        const loc = document.getElementById('numdataset_option');\n        loc.append(\n            select,\n            button,\n            div\n        );\n    }\n\n    // Instantiate the dataset by the server and get back the data.\n    instantiateDataset() {\n        var data = [];\n        data.varsrandom = document.getElementById('id_varsrandom').value;\n        data.varsglobal = document.getElementById('id_varsglobal').value;\n        for (var i = 0; i < this.numsubq; i++) {\n            data['varslocals[' + i + ']'] = document.getElementById('id_vars1_' + i).value;\n            data['answers[' + i + ']'] = document.getElementById('id_answer_' + i).value;\n        }\n        data.start = 0;\n        data.N = document.getElementById('numdataset').value;\n        data.random = 0;\n\n        var p = [];\n        for (var key in data) {\n            p[p.length] = encodeURIComponent(key) + '=' + encodeURIComponent(data[key]);\n        }\n        let params = p.join('&').replace(/ /g, '+');\n\n        var url = M.cfg.wwwroot + '/question/type/formulas/instantiate.php';\n\n        var request = new XMLHttpRequest();\n        request.open(\"POST\", url, true);\n\n        request.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        request.setRequestHeader(\"Content-length\", params.length);\n        request.setRequestHeader(\"Connection\", \"close\");\n\n        request.addEventListener('readystatechange', () => {\n            if (request.readyState == 4 && request.status == 200) {\n                this.vars = JSON.parse(request.responseText);\n                this.showDatasetAndPreview('block');\n                // Add the controls for the display of dataset and preview.\n                try {\n                    this.updateDataset();\n                } catch (e) {\n                    window.console.error(e);\n                }\n                try {\n                    this.updateStatistics();\n                } catch (e) {\n                    window.console.error(e);\n                }\n                try {\n                    this.initPreviewControls();\n                } catch (e) {\n                    window.console.error(e);\n                }\n            }\n        });\n        request.send(params);\n        this.showDatasetAndPreview('hidden');\n    }\n\n    // Show or hide the dataset and preview region.\n    showDatasetAndPreview(show) {\n        const childIds = ['qtextpreview_display', 'varsstatistics_display', 'varsdata_display'];\n        childIds.forEach((id) => {\n            document.getElementById(id).closest('.felement').classList.toggle('hide', show == 'hidden');\n        });\n    }\n\n    // Return the set of groupnames selected for display.\n    getGroupnames() {\n        const groupnames = ['leading', 'random', 'global'];\n        for (let i = 0; i < 100; i++) { // At most 100 parts.\n            groupnames.push(`local${i}`, `answer${i}`);\n        }\n        return groupnames;\n    }\n\n    // Add the controls to view the dataset.\n    updateDataset() {\n        const loc = document.getElementById('varsdata_display');\n        loc.innerHTML = '';\n\n        const groupnames = this.getGroupnames();\n        const names = Object.assign({}, this.vars.names);\n        names.leading = ['#'];\n\n        const lists = this.vars.lists.map((listItem) => Object.assign({}, listItem));\n        const finalItem = lists.length - 1;\n        lists[finalItem].leading = [finalItem];\n\n        const result = this.getDatasetDisplay(names, lists, this.vars.errors, groupnames);\n        loc.innerHTML = result;\n    }\n\n    // Show the statistics for the dataset.\n    updateStatistics() {\n        var loc = document.getElementById('varsstatistics_display');\n        loc.innerHTML = '';\n\n        var groupnames = this.getGroupnames();\n        // Var quantities = ['N', 'mean', 'variance', 'min', 'Q1', 'median', 'Q3', 'max'];\n        // var quantities = ['min', 'max', 'mean', 'SD', 'N'];\n        var quantities = ['min', 'max'];\n        var errors = [];\n        var names = {};\n        names.leading = [''];\n        for (let z in this.vars.names) {\n            names[z] = this.vars.names[z];\n        }\n        var lists = [];\n        for (let k = 0; k < quantities.length; k++) {\n            lists.push({});\n        }\n\n        for (let i = 0; i < groupnames.length; i++) {\n            var n = this.vars.names[groupnames[i]];\n            if (n === null) {\n                continue;\n            }\n            var stat = [];\n            for (var j = 0; j < n.length; j++) {\n                var data = [];\n                for (var count = 0; count < this.vars.lists.length; count++) {\n                    try { // Skip all unknown data.\n                        var subset = this.vars.lists[count][groupnames[i]];\n                        data.push(subset[j]);\n                    } catch (e) {\n                        window.console.error(e);\n                    }\n                }\n                var tmpst = this.getStatistics(data);\n                stat.push(tmpst);\n            }\n            for (let k = 0; k < quantities.length; k++) {\n                lists[k][groupnames[i]] = [];\n                for (var z = 0; z < stat.length; z++) {\n                    lists[k][groupnames[i]][z] = stat[z][quantities[k]];\n                }\n            }\n        }\n        for (let k = 0; k < quantities.length; k++) {\n            lists[k].leading = [quantities[k]];\n            errors[k] = '';\n        }\n\n        var result = this.getDatasetDisplay(names, lists, errors, groupnames);\n        loc.innerHTML = result;\n    }\n\n    // Return the statistics for the input data.\n    getStatistics(data) {\n        var sum = 0.0;\n        var sum2 = 0.0;\n        var minimum = Number.MAX_VALUE;\n        var maximum = -Number.MAX_VALUE;\n        var N = 0.0;\n        for (var i = 0; i < data.length; i++) {\n            if (!isNaN(data[i])) {\n                sum += data[i];\n                sum2 += data[i] * data[i];\n                minimum = Math.min(minimum, data[i]);\n                maximum = Math.max(maximum, data[i]);\n                N++;\n            }\n        }\n\n        if (N == 0) {\n            // No need to perform statistics.\n            return {};\n        }\n        var sd = Math.sqrt((sum2 - sum * sum / N) / (N - 1.0));\n        if (N <= 1 || isNaN(sd)) {\n            sd = 0;\n        }\n        return {'N': N, 'mean': sum / N, 'SD': sd, 'min': minimum, 'max': maximum};\n    }\n\n    getDatasetDisplayHeader(names, groupNames) {\n            return groupNames.map((groupName) => {\n            if (names[groupName] === null) {\n                return null;\n            }\n\n            return names[groupName].map((name) => `<th>${name}</th>`).join(\"\\n\");\n        }).filter((value) => !!value).join(\"\\n\");\n    }\n\n    // Display the datatable of the instantiated variables.\n    getDatasetDisplay(names, lists, errors, groupnames) {\n        let header = this.getDatasetDisplayHeader(names, groupnames);\n        header += '<tr>' + header + '</tr>';\n\n        let s = '';\n        for (let count = 0; count < lists.length; count++) {\n            if (count % 50 == 0) {\n                s += header;\n            }\n            let row = '';\n            for (let i = 0; i < groupnames.length; i++) {\n                const n = names[groupnames[i]];\n                if (n === null) {\n                    continue;\n                }\n                const subset = lists[count][groupnames[i]];\n                if (subset === null || subset.length != n.length) {\n                    // Stop outputting any further data for this row.\n                    break;\n                }\n                for (let j = 0; j < n.length; j++) {\n                    try {\n                        row += '<td>' + this.getDatasetShorten(subset[j]) + '</td>';\n                    } catch (e) {\n                        row += '<td></td>';\n                    }\n                }\n            }\n\n            s += `<tr class=\"r${count % 2}\">${row}`;\n            if (errors[count] !== '') {\n                s += `<td>${errors[count]}</td>`;\n            }\n            s += `</tr>`;\n        }\n\n        return `<table border=\"1\" width=\"100%\" cellpadding=\"3\">${s}</table>`;\n    }\n\n    // Return a html string of the shortened element in the dataset table.\n    getDatasetShorten(elem) {\n        if (elem instanceof Array) {\n            var tmpSs = [];\n            for (var k = 0; k < elem.length; k++) {\n                if (typeof elem[k] == 'string') {\n                    tmpSs[k] = elem[k];\n                } else {\n                    // Get the shorter one.\n                    var s = elem[k].toPrecision(4).length < ('' + elem[k]).length ? elem[k].toPrecision(4) : '' + elem[k];\n                    tmpSs[k] = '<span title=\"' + elem[k] + '\">' + s + '</span>';\n                }\n            }\n            return tmpSs.join(', ');\n        } else {\n            if (typeof elem == 'string') {\n                return '<span title=\"' + elem + '\">' + elem + '</span>';\n            } else {\n                // Get the shorter one.\n                const s = elem.toPrecision(4).length < ('' + elem).length ? elem.toPrecision(4) : '' + elem;\n                return '<span title=\"' + elem + '\">' + s + '</span>';\n            }\n        }\n    }\n\n    // Add the controls for the preview function.\n    initPreviewControls() {\n        const loc = document.getElementById('qtextpreview_controls');\n        loc.innerHTML = '';\n\n        const options = this.vars.list.map((listItem) => {\n            const option = document.createElement('option');\n            option.value = listItem;\n            option.innerHTML = listItem;\n            return option;\n        });\n\n        if (options.length) {\n            const select = document.createElement('select');\n            select.id = 'id_formulas_idataset';\n            select.append(...options);\n            loc.append(select);\n        }\n\n        const button = document.createElement('button');\n        button.value = M.util.get_string('renew', 'qtype_formulas');\n        loc.append(button);\n        loc.addEventListener('click', () => {\n            this.updatePreview();\n        });\n\n        this.updatePreview();\n    }\n\n    // Show the questiontext with variables replaced.\n    updatePreview() {\n        let globaltext;\n        try {\n            globaltext = window.tinyMCE.get('id_questiontext').getContent();\n        } catch (e) {\n            globaltext = document.getElementById('id_questiontext').value;\n        }\n        var idataset = document.getElementById('id_formulas_idataset').value;\n        var res = this.substituteVariablesInText(globaltext, this.getVariablesMapping(idataset, ['random', 'global']));\n\n        for (var i = 0; i < this.numsubq; i++) {\n            let txt;\n            try {\n                txt = window.tinyMCE.get('id_subqtext_' + i).getContent();\n            } catch (e) {\n                txt = document.getElementById('id_subqtext_' + i).value;\n            }\n            let fb;\n            try {\n                fb = window.tinyMCE.get('id_feeback_' + i).getContent();\n            } catch (e) {\n                fb = document.getElementById('id_feedback_' + i).value;\n            }\n            var ph = document.getElementsByName('placeholder' + '[' + i + ']')[0];\n            var unit = document.getElementsByName('postunit' + '[' + i + ']')[0];\n            var answer = this.getVariablesMapping(idataset, ['answer' + i])['@' + (i + 1)];\n            if (answer === null) {\n                continue;\n            }\n            var mapping = this.getVariablesMapping(idataset, ['random', 'global', 'local' + i]);\n            var t = txt + `<div style=\"border: solid 1px #aaaaaa; margin : 10px\">${answer} ${unit.value.split('=')[0]}</div>`;\n            t += (fb.length > 0) ? '<div style=\"border: solid 1px #aaaaaa; margin : 10px\">' + fb + '</div>' : '';\n            t = this.substituteVariablesInText(t, mapping);\n            t = '<div style=\"border: solid 1px #ddddff;\"> ' + t + '</div>';\n            if (ph.value == '') {\n                res += t; // Add the text at the end\n            } else {\n                res = res.replace('{' + ph.value + '}', t);\n            }\n        }\n\n        var preview = document.getElementById('qtextpreview_display');\n        preview.innerHTML = '<div style=\"border: solid black 2px; padding : 5px\">' + res + '</div>';\n    }\n\n    // Return the mapping from name to variable values, for the groups specified by groupnames.\n    getVariablesMapping(idataset, groupnames) {\n        const mapping = {};\n        for (var i = 0; i < groupnames.length; i++) {\n            var names = this.vars.names[groupnames[i]];\n            if (names === null) {\n                continue;\n            }\n            var subset = this.vars.lists[idataset][groupnames[i]];\n            if (subset === null || subset.length != names.length) {\n                break; // Stop outputting any further data for this row.\n            }\n            for (var j = 0; j < names.length; j++) {\n                mapping[names[j]] = subset[j];\n            }\n        }\n        return mapping;\n    }\n\n    // Substitute the variables in the text, where the variables is given by the mapping.\n    substituteVariablesInText(text, mapping) {\n        var matches = text.match(/\\{([A-Za-z][A-Za-z0-9_]*)(\\[([0-9]+)\\])?\\}/g);\n        if (matches === null || matches.length == 0) {\n            return text;\n        }\n        for (var i = 0; i < matches.length; i++) {\n            var d = /\\{([A-Za-z][A-Za-z0-9_]*)(\\[([0-9]+)\\])?\\}/.exec(matches[i]);\n            if (d === null) {\n                continue;\n            }\n            if (mapping[d[1]] === null) {\n                continue;\n            }\n            let value = mapping[d[1]];\n            if (value instanceof Array) {\n                var idx = parseInt(d[3]);\n                if (idx >= value.length) {\n                    continue;\n                }\n                value = value[idx];\n            }\n            text = text.replace(matches[i], value);\n        }\n        return text;\n    }\n}\n\nexport const init = () => new FormulasForm();\n"],"names":["formulasFormCorrectness","id","checked","errNames","Array","M","util","get_string","nid","n","document","getElementsByName","bid","b","getElementById","tmp","createElement","parentNode","appendChild","useRawInput","res","exec","value","replace","length","s","innerHTML","addEventListener","e","select","target","closest","formMerge","style","display","FormulasForm","constructor","numsubq","this","countParts","initialiseGlobalOptionsForNamedItem","window","console","warning","i","initialiseSelectiveCriteria","initialiseNumdatasetOption","showDatasetAndPreview","correctnessElement","querySelector","errorType","errorOp","errorVal","updateOptionsFromGlobal","name","globalNamedOption","querySelectorAll","forEach","element","classList","add","firstNamedOption","loc","showId","showCorrectnessField","insertBefore","firstChild","wrapper","append","children","checkbox","prepend","options","Object","entries","_ref","key","selected","option","button","type","instantiateDataset","div","data","varsrandom","varsglobal","start","N","random","p","encodeURIComponent","params","join","url","cfg","wwwroot","request","XMLHttpRequest","open","setRequestHeader","readyState","status","vars","JSON","parse","responseText","updateDataset","error","updateStatistics","initPreviewControls","send","show","toggle","getGroupnames","groupnames","push","names","assign","leading","lists","map","listItem","finalItem","result","getDatasetDisplay","errors","quantities","z","k","stat","j","count","subset","tmpst","getStatistics","sum","sum2","minimum","Number","MAX_VALUE","maximum","isNaN","Math","min","max","sd","sqrt","getDatasetDisplayHeader","groupNames","groupName","filter","header","row","getDatasetShorten","elem","tmpSs","toPrecision","list","updatePreview","globaltext","tinyMCE","get","getContent","idataset","substituteVariablesInText","getVariablesMapping","txt","fb","ph","unit","answer","mapping","t","split","text","matches","match","d","idx","parseInt"],"mappings":"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"}